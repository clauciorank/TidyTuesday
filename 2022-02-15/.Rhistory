#and the episode name is another (CurrentECG) i don't know if this is the same for all animals
cardiacOcc <- xpathSApply(xroot, '//CardiacOccurrenceRecord')
## Datetime all
datetime <- xmlValue(xpathSApply(xroot, '//CardiacOccurrenceRecord/OccurrenceDateTime/DateTime'))[2:length(cardiacOcc)]
datetime <- gsub("T", " ", datetime)
datetime <- as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S", tz = 'Etc/GMT+5')
## Ocurrence Type, ID,
Occtype <- xmlValue(xpathSApply(xroot, '//CardiacOccurrenceRecord/OccurrenceType'))[2:length(cardiacOcc)]
episodeID <- Occtype <- xmlValue(xpathSApply(xroot, '//CardiacOccurrenceRecord/EpisodeID'))[2:length(cardiacOcc)]
## Ocurrence Type, ID,
Occtype <- xmlValue(xpathSApply(xroot, '//CardiacOccurrenceRecord/OccurrenceType'))[2:length(cardiacOcc)]
data <- read.csv('~/Documents/Datasets/Vaccine consequences on reproductibility.csv)
data <- read.csv('~/Documents/Datasets/Vaccine consequences on reproductibility.csv')
data <- read.csv('~/Documents/Datasets/Vaccine consequences on reproductibility.csv')
head(data)
library(dplyr)
library(ggplot2)
library(lubridate)
data$extract_date <- dmy(data$extract_date)
View(data)
data <- read.csv('~/Documents/Datasets/Vaccine consequences on reproductibility.csv')
head
data$extract_date <- dmy(data$extract_date)
plotlist_time_series <- list()
for(i in 2:length(ncol(data))){
graph_data <- data %>% select(1,value = i)
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(colnames(data[i]))
plotlist_time_series[[i]] <- plot
}
View(plotlist_time_series)
plotlist_time_series <- list()
for(i in 2:length(ncol(data))){
graph_data <- data %>% select(extract_date,get(colnames(data)[i]))
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(colnames(data[i]))
plotlist_time_series[[i]] <- plot
}
plotlist_time_series <- list()
for(i in 2:length(ncol(data))){
graph_data <- data %>% select(extract_date,colnames(data)[i])
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(colnames(data[i]))
plotlist_time_series[[i]] <- plot
}
View(plotlist_time_series)
plotlist_time_series <- list()
for(i in colnames(data)[2:9])){
plotlist_time_series <- list()
for(i in colnames(data)[2:9]){
graph_data <- data %>% select(extract_date,colnames(data)[i])
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(colnames(data[i]))
plotlist_time_series[[i]] <- plot
}
plotlist_time_series <- list()
for(i in colnames(data)[2:9]){
graph_data <- data %>% select(extract_date,i)
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(colnames(data[i]))
plotlist_time_series[[i]] <- plot
}
cowplot::plot_grid(plotlist = plotlist_time_series, ncol = 1)
View(plotlist_time_series)
plotlist_time_series[[1]]
plotlist_time_series <- list()
for(i in colnames(data)[2:9]){
graph_data <- data %>% select(extract_date,value = i)
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(colnames(data[i]))
plotlist_time_series[[i]] <- plot
}
plotlist_time_series[[1]]
cowplot::plot_grid(plotlist = plotlist_time_series, ncol = 1)
cowplot::plot_grid(plotlist = plotlist_time_series)
plotlist_time_series <- list()
for(i in colnames(data)[2:9]){
graph_data <- data %>% select(extract_date,value = i)
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(title = i)
plotlist_time_series[[i]] <- plot
}
plotlist_time_series[[1]]
cowplot::plot_grid(plotlist = plotlist_time_series)
theme_set(theme_bw())
plotlist_time_series <- list()
for(i in colnames(data)[2:9]){
graph_data <- data %>% select(extract_date,value = i)
plot <- ggplot(graph_data, aes(x = extract_date, y = value))+
geom_line()+labs(title = i)
plotlist_time_series[[i]] <- plot
}
plotlist_time_series[[1]]
cowplot::plot_grid(plotlist = plotlist_time_series)
cor(data[2:9])
round(cor(data[2:9]),2)
round(cor(data),2)
round(cor(data[2:9]),2)
cor(data[2:9])
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
cor(cor_data)
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
cor(cor_data)
cor(cor_data$tx_incid, cor_data$R)
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
cor(cor_data$tx_incid, cor_data$R, use = "complete.obs")
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
cor(cor_data, use = "complete.obs")
round(cor(cor_data, use = "complete.obs"),2)
install.packages('hmisc')
install.packages('Hmisc')
library(dplyr)
library(ggplot2)
library(lubridate)
library(Hmisc)
theme_set(theme_bw())
rcorr(cor_data)
shapiro.test(cor_data)
for(i in cor_data){
shapiro.test(i)}
print(shapiro.test(i)})
for(i in cor_data){
print(shapiro.test(i))
}
print(shapiro.test(i)[3])
for(i in cor_data){
print(shapiro.test(i)[3])
}
for(i in cor_data){
print(shapiro.test(i)[2])
}
hist(cor_data)
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
round(cor(cor_data, use = "complete.obs"),2)
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
hist(cor_data)
round(cor(cor_data, use = "complete.obs"),2)
library(dplyr)
library(ggplot2)
library(lubridate)
library(Hmisc)
library(corrplot)
theme_set(theme_bw())
cor_data <- data %>% select(-c(n_dose1, n_complet, extract_date))
hist(cor_data)
res <- cor(cor_data, use = "complete.obs")
round(res,2)
corrplot(res)
corrplot(res, type = 'upper')
corrplot(res, type = 'upper', method = 'number')
base::plot(cor_data)
base::plot(cor_data$n_cum_complet, cor_data$tx_pos)
base::plot(cor_data$n_cum_complet, cor_data$taux_occupation_sae)
View(cor_data)
ggplot(cor_data, aes(x = n_cum_compelt, y = tx_pos))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = tx_pos))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = taux_occupation_sae))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = tx_pos))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = taux_occupation_sae))+geom_point()
data$perc_vaccinations <- data$n_cum_complet/65438767*100
ggplot(data, aes(perc_vaccinations, taux_occupation_sae))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = tx_pos))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = taux_occupation_sae))+geom_point()
ggplot(cor_data, aes(x = tx_pos, y = taux_occupation_sae))+geom_point()
pop <- read.csv('~/Documents/Datasets/France-2020.csv)
pop <- read.csv('~/Documents/Datasets/France-2020.csv')
pop <- read.csv('~/Documents/Datasets/France-2020.csv')
head(pop)
pop$total <- pop$M+pop$F
View(pop)
total_pop <- sum(pop$total)
pop$perc <- pop$M/total_pop*100
head(pop)
pop
which(pop$Age == '60-64')
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)]
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)]
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)])
data$perc_vaccinations <- data$n_cum_complet/65438767*100
ggplot(data, aes(perc_vaccinations, taux_occupation_sae))+geom_point()
data$perc_vaccinations <- data$n_cum_complet/65438767*100
ggplot(data, aes(perc_vaccinations, taux_occupation_sae))+geom_point()
pop <- read.csv('~/Documents/Datasets/France-2020.csv')
head(pop)
pop$total <- pop$M+pop$F
total_pop <- sum(pop$total)
pop$perc <- pop$M/total_pop*100
pop
##Sum pop over 60 years old
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)])
pop <- read.csv('~/Documents/Datasets/France-2020.csv')
pop$total <- pop$M+pop$F
total_pop <- sum(pop$total)
pop$perc <- pop$M/total_pop*100
##Sum pop over 60 years old
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)])
pop <- read.csv('~/Documents/Datasets/France-2020.csv')
head(pop)
pop$total <- pop$M+pop$F
total_pop <- sum(pop$total)
pop$perc <- pop$M/total_pop*100
##Sum pop over 60 years old
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)])
data$vaccine_group <- ifelse(data$perc_vaccinations < 20, 'Before 20%', 'After 20%')
table(data$vaccine_group)
data$vaccine_group <- ifelse(data$perc_vaccinations < 30, 'Before 20%', 'After 20%')
table(data$vaccine_group)
data$vaccine_group <- ifelse(data$perc_vaccinations < 20, 'Before 20%', 'After 20%')
table(data$vaccine_group)
ggplot(data, aes(perc_vaccinations, taux_occupation_sae, color = vaccine_group))+geom_point()
ggplot(cor_data, aes(x = tx_pos, y = taux_occupation_sae, color = vaccine_group))+geom_point()
pop <- read.csv('~/Documents/Datasets/France-2020.csv')
head(pop)
pop$total <- pop$M+pop$F
total_pop <- sum(pop$total)
pop$perc <- pop$M/total_pop*100
##Sum pop over 60 years old
sum(pop$perc[which(pop$Age == '60-64'):nrow(pop)])
### Agrouping data after and before 20% of vaccinations
data$vaccine_group <- ifelse(data$perc_vaccinations < 20, 'Before 20%', 'After 20%')
ggplot(cor_data, aes(x = tx_pos, y = taux_occupation_sae, color = vaccine_group))+geom_point()
ggplot(data, aes(x = tx_pos, y = taux_occupation_sae, color = vaccine_group))+geom_point()
ggplot(data, aes(x = tx_pos, y = taux_occupation_sae, color = vaccine_group))+geom_point()+geom_smooth(method = 'lm')
ggplot(data, aes(x = tx_pos, y = taux_occupation_sae, color = vaccine_group))+geom_point()+geom_smooth()
data <- read.csv('~/Documents/Datasets/Vaccine consequences on reproductibility.csv')
head(data)
data$extract_date <- dmy(data$extract_date)
View(data)
View(data)
ggplot(data, aes(extract_date, perc_vaccinations ))+geom_line()
data$perc_vaccinations <- data$n_cum_complet/65438767*100
ggplot(data, aes(perc_vaccinations, taux_occupation_sae))+geom_point()
ggplot(data, aes(extract_date, perc_vaccinations))+geom_line()
ggplot(data, aes(extract_date, tx_inc))
ggplot(data, aes(extract_date, tx_inc))+geom_line
ggplot(data, aes(extract_date, tx_incid))+geom_line
ggplot(data, aes(extract_date, perc_vaccinations))+geom_line()
ggplot(data, aes(extract_date, tx_incid))+geom_line()
ggplot(data, aes(extract_date, perc_vaccinations))+geom_line()
ggplot(data, aes(extract_date, tx_incid))+geom_line()
ggplot(data, aes(extract_date, tx_pos))+geom_line()
ggplot(data, aes(extract_date, taux_occupation_rate))+geom_line()
ggplot(data, aes(extract_date, taux_occupation_sae))+geom_line()
ggplot(cor_data, aes(x = n_cum_complet, y = tx_pos))+geom_point()
ggplot(cor_data, aes(x = n_cum_complet, y = taux_occupation_sae))+geom_point()
ggplot(cor_data, aes(x = tx_pos, y = taux_occupation_sae))+geom_point()
p1 <- ggplot(data, aes(extract_date, perc_vaccinations))+geom_line()
p2 <- ggplot(data, aes(extract_date, tx_incid))+geom_line()
p3 <- ggplot(data, aes(extract_date, tx_pos))+geom_line()
p4 <- ggplot(data, aes(extract_date, taux_occupation_sae))+geom_line()
cowplot::plot_grid(p1,p2,p3,p4)
ncharacter <- function(ncharacter, x){
a <- x
while (nchar(x) <= ncharacter) {
a <- paste(0, a, sep = '')
}
return(a)
}
ncharacter(8, '02')
ncharacter <- function(ncharacter, x){
a <- x
while (nchar(a) <= ncharacter) {
a <- paste(0, a, sep = '')
}
return(a)
}
ncharacter(8, '02')
d <- c('002','005','01')
nchara <- function(ncharacter, x){
a <- x
while (nchar(a) <= ncharacter) {
a <- paste(0, a, sep = '')
}
return(a)
}
nchara(8, '02')
d <- c('002','005','01')
sapply(d, ncharacter = 8, nchara)
e <- sapply(d, ncharacter = 8, nchara)
Titanic
load(Titanic)
data <- Titanic
install.packages('titanic')
library(titanic)
Titanic
data <- titanic
data <- read.csv('~/Documents/titanic.csv')
install.packages('caret')
install.packages('tree')
View(data)
sample(1:887, n = 888/2)
sample(1:887, 888/2)
train_index <- sample(1:887, 888/2)
train <- data[,train_index]
train <- data[train_index,]
test <- data[!train_index,]
test <- data[-train_index,]
model <- glm(Survived ~ ., data)
model <- glm(Survived ~ ., data, family = 'binomial')
model <- glm(Survived ~ ., train, family = 'binomial')
View(train)
data <- read.csv('~/Documents/titanic.csv')
data$Name <- NULL
set.seed(142)
train_index <- sample(1:887, 888/2)
train <- data[train_index,]
test <- data[-train_index,]
model <- glm(Survived ~ ., train, family = 'binomial')
library(caret)
sum(data$Survived)
training <- data[train_index,]
test <- data[-train_index,]
model <- glm(Survived ~ ., training, family = 'binomial')
library(caret)
model <- glm(Survived ~ ., training, family = 'binomial')
prob_train <- predict(training, type = 'response')
prob_train <- predict(object = model, training, type = 'response')
prob_range <- seq(0.3,0.7, 0.1)
prev_train <- ifelse(prob_train > .5, 1, 0)
df_prev <-
confusionMatrix(prev_train, training$Survived)
df_prev <-
confusionMatrix(prev_train, as.factor(training$Survived))
df_prev <-
confusionMatrix(as.factor(prev_train), as.factor(training$Survived))
install.packages('e1071')
df_prev <-
confusionMatrix(as.factor(prev_train), as.factor(training$Survived))
df_prev$table
df_prev$overall
df_prev$overall[1]
df_prev$mode
log_tunning <- function(x){
prev_train <- ifelse(prob_train > .5, 1, 0)
cm_prev <- confusionMatrix(as.factor(prev_train), as.factor(training$Survived))
df_prev <- data.frame(
prev_train = x,
Accuracy = cm_prev$overall[1],
Kappa = cm_prev$overall[2]
)
return(df_prev)
}
log_tunning(prob_range)
log_tunning <- function(x){
prev_train <- ifelse(prob_train > x, 1, 0)
cm_prev <- confusionMatrix(as.factor(prev_train), as.factor(training$Survived))
df_prev <- data.frame(
prev_train = x,
Accuracy = cm_prev$overall[1],
Kappa = cm_prev$overall[2]
)
return(df_prev)
}
log_tunning(prob_range)
mapply(prob_range, log_tunning)
apply(prob_range, log_tunning)
sapply(prob_range, log_tunning)
data.frame(sapply(prob_range, log_tunning))
df <- data.frame(sapply(prob_range, log_tunning))
View(df)
t(df)
df <- t(data.frame(sapply(prob_range, log_tunning)))
df <- tdata.frame(sapply(prob_range, log_tunning))
df <- data.frame(sapply(prob_range, log_tunning))
df <- t(df)
df <- data.frame(sapply(prob_range, log_tunning))
df <- data.frame(t(df))
View(df)
prob_test <- predict(model, test, type = 'response')
test_prediction <- ifelse(prob_test > 0.6, 1, 0)
confusionMatrix(test_prediction, test$Survived)
confusionMatrix(as.factor(test_prediction), test$Survived)
confusionMatrix(as.factor(test_prediction), as.factor(test$Survived))
View(df_prev)
test_prediction <- ifelse(prob_test > 0.5, 1, 0)
confusionMatrix(as.factor(test_prediction), as.factor(test$Survived))
test_prediction <- ifelse(prob_test > 0.6, 1, 0)
confusionMatrix(as.factor(test_prediction), as.factor(test$Survived))
library(tree)
tree_train <- tree(Survived ~ .,data = training)
plot(tree_train)
text(tree_train)
tree_prediction_train <- predict(tree_train, training)
tree_prediction_train <- predict(tree_train, training, type = 'class')
summary(tree_train)
tree_prediction_train <- predict(tree_train, training[-Survived,], type = 'class')
tree_train <- tree(as.factor(Survived) ~ .,data = training)
summary(tree_train)
plot(tree_train)
text(tree_train)
tree_prediction_train <- predict(tree_train, training, type = 'class')
tree_prediction_train
confusionMatrix(tree_prediction_train, as.factor(training$Survived))
tree_prediction_test <- tree_train, test, type = 'class')
tree_prediction_test <- predict(tree_train, test, type = 'class')
confusionMatrix(tree_prediction_test, as.factor(test$Survived))
library(e1071)
naive <- naiveBayes(Survived ~ ., data = train)
predict(naive, train)
train_pred <- predict(naive, train)
confusionMatrix(train_pred, as.factor(training$Survived))
test_pred_naive <- predict(naive, train)
confusionMatrix(test_pred_naive, as.factor(test$Survived))
test_pred_naive <- predict(naive, test)
confusionMatrix(test_pred_naive, as.factor(test$Survived))
data <- read_sf('~/Downloads/DIVISA_DE_BAIRROS/')
library(sf)
library(leaflet)
data <- read_sf('~/Downloads/DIVISA_DE_BAIRROS/')
class(data)
data1 <- read_sf('~/Downloads/DIVISA_DE_BAIRROS/')
leaflet() %>% addPolygons(data1)
leaflet() %>% addPolygons(data = data1)
leaflet() %>% addTiles() %>% addPolygons(data = data1)
data1 <- read_sf('~/Downloads/tl_2020_us_state/')
leaflet() %>% addTiles() %>% addPolygons(data = data1)
View(data1)
data1 <- read_sf('~/Downloads/ARRUAMENTO_NAO_IMPLANTADO//')
leaflet() %>% addTiles() %>% addPolygons(data = data1)
install.packages('XLSX')
install.packages('xlsx')
install.packages('openslsx')
install.packages('openxlsx')
library(openxlsx)
data <- read.xlsx('~/Downloads/_77e603e3a16e4dc7bba068376998a19e_M3_data_student.xlsx')
View(data)
score_1 = (0.7*data$`Under-registered.deaths.(%)`[1]*100)+(0.3*data$`Ill-defined.COD.(%)`[1]*100)
score <- function(x,y){
score_1 = (0.7*x*100)+(0.3*y*100)
if(score_1 <= 10){
'Good'
}else if (score_1 > 10 & score_1 <= 20){
'Medium'
}else if (score_1 > 20 & score_1 <= 40){
'Poor'
}else if(score_1 > 40){
'Very Poor'
}else {
'No data'
}
}
mapply(x = data$`Under-registered.deaths.(%)`, y = data$`Ill-defined.COD.(%)`, FUN = score)
score <- function(x,y){
score_1 = (0.7*x*100)+(0.3*y*100)
if (is.na(score_1)){
'No data'
}else  if(score_1 <= 10){
'Good'
}else if (score_1 > 10 & score_1 <= 20){
'Medium'
}else if (score_1 > 20 & score_1 <= 40){
'Poor'
}else if(score_1 > 40){
'Very Poor'
}
}
mapply(x = data$`Under-registered.deaths.(%)`, y = data$`Ill-defined.COD.(%)`, FUN = score)
data$Data.Quality.Category <- mapply(x = data$`Under-registered.deaths.(%)`, y = data$`Ill-defined.COD.(%)`, FUN = score)
?qunif
qunif(.75,0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
t(temp)
1*0.1+2*.2+3*.03+4*.4
setwd('~/Documents/git/Vasco Tweets/')
usethis::create_project()
usethis::create_project('.')
usethis::create_project('~/Documents/git/VascoCI-CD/')
usethis::create_project('~/Documents/git/VascoGit')
here::dr_here()
usethis::create_project('~/Documents/git/VascoGit')
Sys.getenv('TWITTER_ACCESS_TOKEN_SECRET')
Sys.getenv()
Sys.getenv('USERNAME')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot(cars, aes(speed, dist))+geom_point()
setwd("~/Documents/TidyTuesday/2022-02-15")
colors = c('#fdfdfd', '#ecb456', '#e3bbb0', '#c90a32',
'#291c54', '#7a543f', '#737373', '#333232', '#000000')
levels = c("UNDER - 10,000", "10,000 - 25,000", "25,000 - 50,000", "50,000 - 100,000",
"200,000 - 300,000", "300,000 - 500,000",  "500,000 - 600,000", "600,000 - 750,000",
"750,000 AND OVER")
map <- sf::read_sf('./usmap')
data <- read.csv('data.csv') |>
dplyr::left_join(map, by = c('State' = 'STATE'))
library(ggplot2)
library(showtext)
font_add(family = 'mandator', regular = './font/MANDATOR.ttf')
showtext_auto()
ggplot(data) +
geom_sf(aes(geometry = geometry, fill = factor(Population, levels = levels)), color = 'black')+
scale_fill_manual(values = colors) +
labs(title = stringr::str_wrap('RELATIVE NEGRO POPULATION OF THE STATES OF THE UNITED STATES',46),
fill = '')+
theme_void()+
theme(legend.position = 'bottom', plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = '#dbd1c0', color = '#dbd1c0'),
plot.background =  element_rect(fill = '#dbd1c0', color = '#dbd1c0'),
panel.border = element_blank(),
text = element_text(family = 'mandator')
)
